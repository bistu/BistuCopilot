---
description: 
globs: 
alwaysApply: false
---
# Responsive Development Best Practices

## Core Principles

1. **Mobile-First Design** - Always design for mobile first, then expand to larger screens
2. **Unified Width Management** - Use `useChatWidth` Hook for consistent layout widths
3. **Semantic Responsive Classes** - Use meaningful Tailwind CSS class combinations
4. **Component-Based Design** - Break complex UI into reusable responsive components

## Unified Width Management

### useChatWidth Hook

All chat-related components MUST use `lib/hooks/use-chat-width.ts`:

```typescript
import { useChatWidth } from '@lib/hooks/use-chat-width';

const ChatComponent = () => {
  const { widthClass, paddingClass } = useChatWidth();
  
  return (
    <div className={cn(
      "w-full mx-auto",
      widthClass,
      paddingClass
    )}>
      {/* Component content */}
    </div>
  );
};
```

## Tailwind CSS Breakpoints

```
base: < 640px   - Mobile devices (portrait)
sm: 640px       - Small devices (mobile landscape)
md: 768px       - Medium devices (tablets)
lg: 1024px      - Large devices (laptops)
xl: 1280px      - Extra large devices (desktops)
2xl: 1536px     - Extra extra large devices
```

## Responsive Component Patterns

### 1. Chat Component Pattern

```typescript
export const ChatLoader = ({ messages }: ChatLoaderProps) => {
  const { widthClass, paddingClass } = useChatWidth();
  
  return (
    <div className={cn(
      "w-full mx-auto overflow-y-auto pb-32",
      widthClass,
      paddingClass
    )}>
      {messages.map(message => (
        <MessageComponent key={message.id} message={message} />
      ))}
    </div>
  );
};
```

### 2. Input Component Pattern

```typescript
export const ChatInput = () => {
  const { widthClass, paddingClass } = useChatWidth();
  
  return (
    <div className={cn(
      "fixed bottom-0 left-0 right-0 bg-background border-t",
      widthClass,
      paddingClass,
      "mx-auto"
    )}>
      {/* Input content */}
    </div>
  );
};
```

### 3. Sidebar Pattern

```typescript
export const Sidebar = () => {
  const isMobile = useMobile();
  
  return (
    <>
      {/* Desktop fixed sidebar */}
      <div className="hidden md:flex md:w-64 md:flex-col">
        <SidebarContent />
      </div>
      
      {/* Mobile drawer sidebar */}
      {isMobile && (
        <div className="fixed inset-0 z-50 md:hidden">
          <SidebarBackdrop />
          <SidebarContent />
        </div>
      )}
    </>
  );
};
```

## Mobile Adaptation Strategies

### Navigation Adaptation

```typescript
// Mobile only
<div className="md:hidden">
  <MobileNavButton />
</div>

// Desktop only
<div className="hidden md:flex">
  <DesktopNavigation />
</div>
```

### Layout Switching

```typescript
// Responsive Flex layout
<div className="flex flex-col md:flex-row">
  <aside className="w-full md:w-64">Sidebar</aside>
  <main className="flex-1">Main content</main>
</div>

// Responsive Grid layout
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {items.map(item => <Card key={item.id} {...item} />)}
</div>
```

## Responsive Text and Spacing

### Text Size Adaptation

```typescript
// Responsive headings (with required font-serif)
<h1 className="text-2xl md:text-3xl lg:text-4xl font-bold font-serif">
  Title Content
</h1>

// Responsive body text (with required font-serif)
<p className="text-sm md:text-base lg:text-lg font-serif">
  Body content
</p>
```

### Spacing Adaptation

```typescript
// Responsive padding
<div className="p-4 md:p-6 lg:p-8">Content</div>

// Responsive margin
<div className="mt-4 md:mt-6 lg:mt-8">Content</div>

// Responsive spacing
<div className="space-y-4 md:space-y-6 lg:space-y-8">
  <div>Item 1</div>
  <div>Item 2</div>
</div>
```

## Custom Hooks

### Mobile Detection

Use `lib/hooks/use-mobile.ts`:

```typescript
import { useMobile } from '@lib/hooks/use-mobile';

const Component = () => {
  const isMobile = useMobile();
  
  return (
    <div>
      {isMobile ? <MobileView /> : <DesktopView />}
    </div>
  );
};
```

## Font Requirements

**CRITICAL**: All text CSS MUST include `font-serif` class as per project requirements.

```typescript
// ✅ Correct - includes font-serif
<p className="text-base font-serif">Text content</p>

// ❌ Incorrect - missing font-serif
<p className="text-base">Text content</p>
```
