---
description: if I tell you commit to the git,you should follow this rule
globs: 
alwaysApply: false
---
# Git Commit Rule

## Commit Message Format

```
<type>(<scope>): <subject in Chinese>

<body in Chinese> (optional)

<footer> (optional)
```

## Types

- **feat**: New feature or enhancement
- **fix**: Bug fix
- **docs**: Documentation changes only
- **style**: Formatting, missing semicolons, etc.
- **refactor**: Code changes that neither fix a bug nor add a feature
- **perf**: Performance improvements
- **test**: Adding or correcting tests
- **chore**: Build process, auxiliary tools, libraries, etc.
- **revert**: Reverting a previous commit

## Scope (Optional)

- **api**: Backend API-related changes
- **ui**: User interface components
- **db**: Database-related changes
- **auth**: Authentication/authorization
- **config**: Configuration changes
- **deps**: Dependency updates
- **core**: Core functionality
- **route**: Routing changes
- **all**: Multiple parts of the codebase

## Subject Rules

- Use Chinese for subject
- Start with a verb
- No period at the end
- Maximum 50 characters
- Use imperative, present tense (e.g., "添加..." not "添加了...")

## Multi-line Commit Examples

### Single Line
```bash
git commit -m "feat(api): 添加用户登录API"
git commit -m "fix(ui): 修复按钮在IE11中的样式问题"
git commit -m "docs: 更新开发环境配置文档"
```

### Multi-line with Details
```bash
git commit -m "feat(api): 添加用户认证API端点" \
           -m "" \
           -m "实现基于JWT的认证机制，支持用户登录和令牌刷新功能。" \
           -m "添加了相应的单元测试和文档。" \
           -m "" \
           -m "Closes #123"
```

### Breaking Changes
```bash
git commit -m "feat(auth): 重构用户认证系统" \
           -m "" \
           -m "升级到新的认证架构，提供更好的安全性和性能。" \
           -m "" \
           -m "BREAKING CHANGE: 旧的认证令牌将不再有效，用户需要重新登录。"
```

## Multi-line Format Rules

- **First `-m`**: Main commit message (type, scope, subject)
- **Second `-m`**: Empty string `""` for blank line between subject and body
- **Subsequent `-m`**: Detailed explanations, reasons, impacts
- **Last `-m`**: Footer information (issue references, breaking changes)

## Usage Guidelines

1. **Simple changes**: Use single-line commits
2. **Complex features**: Use multi-line commits with detailed explanations
3. **Breaking changes**: Must use multi-line commits explaining impact and migration
4. **Important fixes**: Recommended to use multi-line commits explaining cause and solution

## Chinese Language Guidelines

- Use Simplified Chinese
- Be concise and clear
- Avoid technical jargon when possible
- Start with action verb
- Focus on what was changed and why


