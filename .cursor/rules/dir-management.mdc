---
description: 
globs: 
alwaysApply: true
---
# Directory Structure Management

This document outlines the directory structure of the LLM-EduHub project and provides guidelines for maintaining and updating the directory organization.

## Project Overview

LLM-EduHub is a Next.js application using the App Router pattern. The directory structure follows Next.js 13+ conventions with some custom organization patterns for better code separation.

## Root Directory Structure

```
llm-eduhub/
  ├── .cursor/            # Cursor IDE configuration files
  │   └── rules/          # Project-specific rules and documentation
  ├── .next/              # Next.js build output
  ├── .vscode/            # VSCode configuration files
  ├── app/                # Application source code (App Router pattern)
  │   ├── (components)/   # Component directory (grouped)
  │   ├── (lib)/          # Utilities, hooks, and configuration (grouped)
  │   ├── api/            # API routes
  │   ├── about/          # About page route
  │   ├── dashboard/      # Dashboard page route
  │   ├── login/          # Login page route
  │   ├── register/       # Register page route
  │   └── page.tsx        # Home page route
  ├── public/             # Static assets
  ├── scripts/            # Utility scripts for development, deployment, etc.
  │   ├── test_dify_proxy_advanced.py # Advanced Dify proxy test script
  │   └── test_dify_proxy_streaming.py # Dify streaming proxy test script
  ├── supabase/           # Supabase configuration and migrations
  ├── .env.local          # Local environment variables
  ├── .gitignore          # Git ignore configuration
  ├── CONTRIBUTING.md     # Contribution guidelines
  ├── eslint.config.mjs   # ESLint configuration
  ├── middleware.ts       # Next.js middleware
  ├── next-env.d.ts       # Next.js TypeScript declarations
  ├── next.config.ts      # Next.js configuration
  ├── package-lock.json   # Dependency lock file
  ├── package.json        # Project dependencies and scripts
  ├── postcss.config.mjs  # PostCSS configuration
  ├── README.md           # Project documentation
  └── tsconfig.json       # TypeScript configuration
```

## App Directory Structure

The `app/` directory follows Next.js App Router conventions with added organizational grouping:

```
app/
  ├── (components)/
  │   ├── ui/            # Generic UI components (e.g., Button.tsx)
  │   ├── auth/          # Authentication related components (e.g., LoginForm.tsx, RegisterForm.tsx)
  │   ├── dashboard/     # Dashboard related components (e.g., DashboardContent.tsx)
  │   ├── home/          # Home page related components (e.g., Home.tsx)
  │   └── ...
  ├── (lib)/
  │   ├── config/        # Configuration files
  │   ├── utils/         # Utility functions
  │   └── ...
  ├── api/
  │   ├── auth/          # Authentication-related API routes
  │   └── ...
  ├── about/
  │   └── page.tsx       # Route for /about
  ├── dashboard/
  │   └── page.tsx       # Route for /dashboard (protected)
  ├── login/
  │   └── page.tsx       # Route for /login
  ├── register/
  │   └── page.tsx       # Route for /register
  └── page.tsx           # Route for / (home)
```

## Naming Conventions

1. **Directories**:
   - Use kebab-case for multi-word directory names (e.g., `user-settings/`)
   - Wrap grouping directories in parentheses (e.g., `(components)/`, `(lib)/`)
   - Route directories should match the URL path (e.g., `login/`)
   - Use square brackets for dynamic route segments (e.g., `[appId]/`)
   - Use spread syntax for catch-all routes (e.g., `[...slug]/`)

2. **Files**:
   - Route entry points MUST be named `page.tsx`.
   - Use PascalCase for React components (e.g., `Button.tsx`, `LoginForm.tsx`).
   - Use camelCase for utility files (e.g., `difyConfig.ts`, `utils.ts`).
   - Use kebab-case for static assets (e.g., `logo-dark.png`).
   - Always include appropriate file extensions.

## Directory Management Guidelines

When modifying the project structure, please follow these guidelines:

1. **Adding New Directories**:
   - Components go under `(components)/`, organized by feature/type (e.g., `(components)/auth/`).
   - Utilities go under `(lib)/`, organized by type (e.g., `(lib)/utils/`).
   - New page routes are created directly under `app/` (e.g., `app/settings/page.tsx` for `/settings`).

2. **Adding New Files**:
   - Follow the established naming conventions.
   - Place files in the appropriate directory based on their purpose.
   - Components related to a specific feature should reside in a dedicated subdirectory within `(components)/`.

3. **Updating This Document**:
   - When adding, removing, or reorganizing directories or routes, update this document.
   - Include a brief explanation of the purpose of new directories/routes.
   - Keep the directory tree representations up-to-date.

4. **Special Considerations**:
   - Grouped directories (with parentheses) do not affect the URL path.
   - `middleware.ts` controls access to routes (public vs. protected). Ensure public routes are correctly listed.
   - API routes should be organized by service or functionality domain within `app/api/`.

## Path Aliases

The project uses TypeScript path aliases defined in `tsconfig.json` for cleaner imports:

- `@/` - Points to the `app/` directory
- `@lib/*` - Points to the `app/(lib)/*` directory
- `@components/*` - Points to the `app/(components)/*` directory

Always use path aliases instead of relative imports when crossing major directory boundaries (e.g., importing from `(lib)` into `(components)`).

## Update Process

When making structural changes to the project:

1. Plan your directory/route changes.
2. Implement the changes following the conventions above.
3. Update `middleware.ts` if route accessibility changes (public/protected).
4. Update this document (`dir-management.mdc`) to reflect the new structure.
5. Commit the updated document along with your code changes using the standard commit format.

By maintaining this document, we ensure that all team members understand the project structure and can contribute effectively.

## Directory Naming

1. **Special Directories**:
   - `(components)`: Contains all React components, organized by feature/type. Not part of the route.
   - `(lib)`: Contains utility functions, configuration, hooks, etc. Not part of the route.
   - `api`: Contains backend API routes. Part of the route (`/api/...`).
   - `public`: Contains static assets served directly.

## Import Path

1. **Path Aliases**:
   - Project uses the following path aliases for cleaner imports:
   ```json
   {
     "paths": {
       "@/*": ["./app/*"],
       "@lib/*": ["./app/(lib)/*"],
       "@components/*": ["./app/(components)/*"]
     }
   }
   ```

2. **Import Rules**:
   - Use path aliases instead of relative paths for cross-directory imports.
   - Component imports use `@components/` (e.g., `@components/ui/Button`, `@components/auth/LoginForm`).
   - Utility imports use `@lib/` (e.g., `@lib/utils`).
   - Importing files within the same top-level directory (e.g., two components within `(components)/auth/`) can use relative paths if preferred, but aliases are generally recommended for clarity.

   Example:
   ```typescript
   // ✅ Correct import method
   import { Button } from '@components/ui/Button';
   import { cn } from '@lib/utils';
   import { Home } from '@components/home/Home';
   import { LoginForm } from '@components/auth/LoginForm';

   // ❌ Avoid using deep relative paths like this
   // import Button from '../../../../(components)/ui/Button';
   ```

3. **Import Order**:
   - Third-party library imports (e.g., `react`, `next`, `framer-motion`)
   - Path aliases imports (`@components/`, `@lib/`)
   - Relative imports (if necessary)
   - Style imports (if applicable)

## API Directory Structure

```
app/
  ├── api/
  │   ├── auth/          # Authentication-related API routes (e.g., /api/auth/login)
  │   │   └── route.ts   # Example API route file
  │   ├── chat/          # Chat-related API routes
  │   └── ...
  └── ...
```

## Tool and Configuration Directory

```
app/
  ├── (lib)/
  │   ├── config/        # Configuration files (e.g., Supabase config)
  │   ├── utils/         # Utility functions (e.g., cn function)
  │   └── types/         # Shared TypeScript types
  │   └── hooks/         # Custom React hooks
  │   └── ...
  └── ...
```

## Best Practices

1. **Component Organization**:
   - Generic, reusable UI components go in `(components)/ui/`.
   - Components specific to a feature/page go in dedicated subdirectories (e.g., `(components)/auth/`, `(components)/dashboard/`).
   - Page components (like `Home.tsx`) reside in feature-specific directories (e.g., `(components)/home/`).

2. **Import Practices**:
   - Prefer path aliases over relative paths for clarity and easier refactoring.
   - Keep import paths consistent.

3. **File Location**:
   - Component-related type definitions can reside within the component file or a nearby `types.ts` file if complex.
   - Shared type definitions go in `(lib)/types/`.
   - Utility functions go in `(lib)/utils/`.

4. **Directory Grouping**:
   - Use parentheses `()` to group related code without affecting the URL structure (e.g., `(components)`, `(lib)`).

5. **响应式开发规范**:
   - 所有组件必须使用Tailwind CSS进行响应式设计
   - 遵循移动优先(Mobile-First)的开发方法
   - 组织结构应支持不同屏幕尺寸下的组件复用

## 响应式开发指南

为确保项目在各种设备上具有良好的用户体验，所有前端组件必须遵循以下响应式开发规范：

### Tailwind CSS断点使用

```
sm: 640px   - 小型设备（如手机横屏）
md: 768px   - 中型设备（如平板）
lg: 1024px  - 大型设备（如笔记本）
xl: 1280px  - 特大型设备（如台式机）
2xl: 1536px - 超大型设备
```

### 响应式开发原则

1. **移动优先设计**:
   - 始终先为移动设备设计界面，然后通过媒体查询扩展到更大屏幕
   - 示例: `className="text-sm md:text-base lg:text-lg"`

2. **弹性布局**:
   - 使用Flexbox和Grid进行页面布局
   - 适当使用`flex-col`和`flex-row`在不同屏幕尺寸间切换
   - 示例: `className="flex flex-col md:flex-row"`

3. **响应式间距和尺寸**:
   - 使用响应式间距和尺寸类
   - 示例: `className="p-4 md:p-6 lg:p-8"`

4. **内容适应**:
   - 长文本在小屏幕上应适当截断或重排
   - 图片应适当缩放并保持比例
   - 示例: `className="w-full max-w-md lg:max-w-lg"`

5. **组件组织**:
   - 复杂组件应拆分为子组件，便于在不同屏幕尺寸下重组
   - 使用条件渲染为不同屏幕尺寸提供不同UI方案

### 响应式组件示例

在`(components)`目录下的组件应当遵循响应式设计原则:

```tsx
// app/(components)/ui/Card.tsx 示例
export function Card({ children }: { children: React.ReactNode }) {
  return (
    <div className="bg-white rounded-lg shadow-md 
                    p-4 md:p-6 lg:p-8 
                    w-full max-w-sm md:max-w-md lg:max-w-lg
                    mx-auto">
      {children}
    </div>
  );
}
```

遵循这些响应式开发规范可确保应用在各种设备上都有一致且良好的用户体验。

Following these guidelines ensures code consistency and maintainability. Please refer to this document when adding new files or modifying directory structure.


